/* *******************************************************************************************************
Copyright (c) 2015 EXILANT Technologies Private Limited

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 ******************************************************************************************************** */
package com.exilant.exility.core;

/**
 * filter rows from a table/view based on filtering criterion. This class is
 * encouraged over SqlTask because the SQL is generated by Exility, and hence
 * portability across RDBMS is better managed, than programmers writing RDMS
 * specific SQLs in a SqlTask
 * 
 */
public class TableFilterTask extends ExilityTask {
	/**
	 * selection criterion as a set of conditions that are always assumed to be
	 * "anded" together
	 */
	Condition[] selectionCriterion = new Condition[0];

	/**
	 * comma separated list of columns to select from the underlying table.
	 * Default is to select all columns
	 */
	String columnNames = null;

	/**
	 * It is always a good idea to specify sort conditions, as RDBMS does not
	 * guarantee any order
	 */
	String sortByColumns = null;

	/**
	 * default is ascending
	 */
	String sortOrder = "asc";

	/**
	 * 
	 */
	boolean eliminateDuplicates = false;
	/***
	 * We had lookupStep that mimicked local service. However, the local service
	 * syntax was not compatible with that of the server and we decided to ask
	 * people to replace lookupStep with tableFilterTask. I missed two
	 * short-comings of lookup. It never read standard fields like
	 * modifiedUserName etc.. It did not generate 'as'for cases where column
	 * name and name were different for a column. This directive is for me to
	 * behave the same way that lookup did.
	 */
	boolean migratedFromLookUp = false;

	@Override
	public int executeTask(DataCollection dc, DbHandle handle)
			throws ExilityException {
		TableInterface table = this.getTable(dc);
		String namesToSelect = this.columnNames;
		if (this.migratedFromLookUp && namesToSelect == null) {
			if (table instanceof Table == false) {
				dc.raiseException(
						Message.EXILITY_ERROR,
						"migratedFromLookUp directive can be used only for xml based table definition, but not for generated table)");
				return 0;
			}
			namesToSelect = ((Table) table).getAllFieldNamesForLookup();
		}
		if (this.recordName != null && this.selectionCriterion.length == 0) {
			this.selectionCriterion = Records.getRecord(this.recordName)
					.getFilterConditions(dc);
		}
		return table.filter(dc, handle, this.gridName, this.selectionCriterion,
				namesToSelect, this.sortByColumns, this.sortOrder, null,
				this.eliminateDuplicates);
	}

	@Override
	public int executeBulkTask(DataCollection dc, DbHandle handle)
			throws ExilityException {
		dc.raiseException(Message.EXILITY_ERROR,
				"tableFilterTask can not be executed for each row in a grid(bulk mode)");
		return 0;
	}

	@Override
	public DataAccessType getDataAccessType() {
		return DataAccessType.READONLY;
	}
}
